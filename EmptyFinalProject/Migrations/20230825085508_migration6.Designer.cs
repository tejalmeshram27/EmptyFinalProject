// <auto-generated />
using System;
using EmptyFinalProject.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EmptyFinalProject.Migrations
{
    [DbContext(typeof(SportsDbContext))]
    [Migration("20230825085508_migration6")]
    partial class migration6
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EmptyFinalProject.Models.Category", b =>
                {
                    b.Property<int>("catergoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("catergoryId"), 1L, 1);

                    b.Property<string>("categoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("catergoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            catergoryId = 1,
                            categoryName = "Boring",
                            description = "Very Boring"
                        },
                        new
                        {
                            catergoryId = 2,
                            categoryName = "Watchable",
                            description = "Can Watch"
                        },
                        new
                        {
                            catergoryId = 3,
                            categoryName = "Interesting",
                            description = "Very Interesting"
                        });
                });

            modelBuilder.Entity("EmptyFinalProject.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"), 1L, 1);

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Address2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("OrderPlaced")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OrderTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Pincode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("OrderId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("EmptyFinalProject.Models.ShoppingCartItem", b =>
                {
                    b.Property<int>("ShoppingCartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShoppingCartItemId"), 1L, 1);

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("ShoppingCartId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SportsId")
                        .HasColumnType("int");

                    b.HasKey("ShoppingCartItemId");

                    b.HasIndex("SportsId");

                    b.ToTable("ShoppingCartItems");
                });

            modelBuilder.Entity("EmptyFinalProject.Models.Sports", b =>
                {
                    b.Property<int>("SportsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SportsId"), 1L, 1);

                    b.Property<int>("categoryId")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("playersReq")
                        .HasColumnType("int");

                    b.Property<string>("sportsType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SportsId");

                    b.HasIndex("categoryId");

                    b.ToTable("Sports");

                    b.HasData(
                        new
                        {
                            SportsId = 1,
                            categoryId = 1,
                            name = "Cricket",
                            playersReq = 22,
                            sportsType = "Outdoor"
                        },
                        new
                        {
                            SportsId = 2,
                            categoryId = 2,
                            name = "Badminton",
                            playersReq = 2,
                            sportsType = "Indoor"
                        },
                        new
                        {
                            SportsId = 3,
                            categoryId = 3,
                            name = "Kabaddi",
                            playersReq = 14,
                            sportsType = "Indoor"
                        },
                        new
                        {
                            SportsId = 4,
                            categoryId = 1,
                            name = "Football",
                            playersReq = 22,
                            sportsType = "Outdoor"
                        },
                        new
                        {
                            SportsId = 5,
                            categoryId = 2,
                            name = "Tennis",
                            playersReq = 2,
                            sportsType = "Outdoor"
                        },
                        new
                        {
                            SportsId = 6,
                            categoryId = 3,
                            name = "Golf",
                            playersReq = 1,
                            sportsType = "Outdoor"
                        },
                        new
                        {
                            SportsId = 7,
                            categoryId = 2,
                            name = "Basketball",
                            playersReq = 24,
                            sportsType = "Indoor"
                        },
                        new
                        {
                            SportsId = 8,
                            categoryId = 3,
                            name = "Baseball",
                            playersReq = 18,
                            sportsType = "Outdoor"
                        },
                        new
                        {
                            SportsId = 9,
                            categoryId = 2,
                            name = "Chess",
                            playersReq = 2,
                            sportsType = "Indoor"
                        },
                        new
                        {
                            SportsId = 10,
                            categoryId = 3,
                            name = "FoosBall",
                            playersReq = 4,
                            sportsType = "Indoor"
                        });
                });

            modelBuilder.Entity("EmptyFinalProject.Models.ShoppingCartItem", b =>
                {
                    b.HasOne("EmptyFinalProject.Models.Sports", "Sports")
                        .WithMany()
                        .HasForeignKey("SportsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sports");
                });

            modelBuilder.Entity("EmptyFinalProject.Models.Sports", b =>
                {
                    b.HasOne("EmptyFinalProject.Models.Category", "catergory")
                        .WithMany()
                        .HasForeignKey("categoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("catergory");
                });
#pragma warning restore 612, 618
        }
    }
}
